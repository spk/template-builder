# This file describes an application. You can have multiple applications
# in the same project.
#
# See https://docs.platform.sh/user_guide/reference/platform-app-yaml.html

# The name of this app. Must be unique within a project.
name: "app"

# The runtime the application uses.
type: "ruby:2.7"

# The relationships of the application with services or other applications.
#
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
    database: 'db:postgresql'

# The size of the persistent disk of the application (in MB).
disk: 1024

# Set environment variables to adjust how Rails will run.
variables:
    env:
        RAILS_ENV: 'production'
        RACK_ENV: 'production'
        RAILS_LOG_TO_STDOUT: true
        BUNDLE_ERROR_ON_STDERR: 1
        DEFAULT_BUNDLER_VERSION: "2.1.4" # in case none is mentioned in Gemfile.lock
        RAILS_TMP: /tmp
        EXECJS_RUNTIME: 'Node'
        NODE_ENV: 'production'
        # Update these for your desired NVM and Node versions.
        NVM_VERSION: v0.37.2
        NODE_VERSION: v14.15.1

# The 'mounts' describe writable, persistent filesystem mounts in the application.
mounts:
    "/log":
        source: local
        source_path: log
    "/storage":
        source: local
        source_path: storage
    "/tmp":
        source: local
        source_path: tmp

# The hooks executed at various points in the lifecycle of the application.
hooks:
    # The build hook turns what is in source control into the deployable application.
    build: |
        set -e

        echo "Installing NVM."
        # Webpacker requires Node.js ">=10.17.0"
        unset NPM_CONFIG_PREFIX
        export NVM_DIR="$PLATFORM_APP_DIR/.nvm"
        # install.sh will automatically install NodeJS based on the presence of $NODE_VERSION
        touch ~/.profile
        NVM_DIR="$PLATFORM_APP_DIR/.nvm"
        mkdir -p $PLATFORM_CACHE_DIR/.nvm
        mkdir -p $NVM_DIR/.cache
        ln -s $PLATFORM_CACHE_DIR/.nvm $NVM_DIR/.cache
        wget -c -q -O "$PLATFORM_CACHE_DIR/nvm_install.sh" "https://raw.githubusercontent.com/creationix/nvm/$NVM_VERSION/install.sh"
        bash $PLATFORM_CACHE_DIR/nvm_install.sh
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm use default
        # install yarn
        npm install --global yarn

        # we install the bundled bundler version and fallback to a default (in env vars above)
        export BUNDLER_VERSION="$(grep -A 1 "BUNDLED WITH" Gemfile.lock | tail -n 1)" || $DEFAULT_BUNDLER_VERSION
        echo "Install bundler $BUNDLER_VERSION"
        gem install --no-document bundler -v $BUNDLER_VERSION
        echo "Configuring Bundler for production"
        bundle config set without 'development test'
        bundle config set deployment true
        bundle config set cache_all true
        bundle config set ignore_messages true
        bundle config set clean true

        echo "Installing gems"
        # We copy the bundle directory to the Platform.sh cache directory for
        # safe keeping, then restore from there on the next build. That allows
        # bundler to skip downloading code it doesn't need to.
        [ -d "$PLATFORM_CACHE_DIR/bundle" ] && \
          rsync -az --delete "$PLATFORM_CACHE_DIR/bundle/" vendor/bundle/
        mkdir -p "$PLATFORM_CACHE_DIR/bundle"
        bundle install
        # synchronize updated cache for next build
        rsync -az --delete vendor/bundle/ "$PLATFORM_CACHE_DIR/bundle/"
        # precompile assets
        echo "Precompiling assets"
        # We copy the webpacker directory to the Platform.sh cache directory for
        # safe keeping, then restore from there on the next build. That allows
        # bundler to skip downloading code it doesn't need to.
        mkdir -p "$PLATFORM_CACHE_DIR/webpacker"
        mkdir -p "$RAILS_TMP/cache/webpacker"
        [ -d "$PLATFORM_CACHE_DIR/webpacker" ] && \
          rsync -az --delete "$PLATFORM_CACHE_DIR/webpacker/" $RAILS_TMP/cache/webpacker/
        bundle exec rails assets:precompile
        rsync -az --delete $RAILS_TMP/cache/webpacker/ "$PLATFORM_CACHE_DIR/webpacker/"
    # The deploy hook runs after your application has been deployed and started.
    deploy: |
        bundle exec rails db:migrate
# The configuration of the application when running.
web:
    upstream:
        # Send requests to the app server through a unix socket, whose location
        # will be defined in an environment variable named SOCKET.
        socket_family: "unix"

    commands:
        start: 'bundle exec unicorn -l $SOCKET'
